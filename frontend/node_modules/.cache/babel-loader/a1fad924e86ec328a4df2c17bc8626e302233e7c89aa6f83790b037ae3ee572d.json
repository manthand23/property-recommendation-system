{"ast":null,"code":"var _jsxFileName = \"/Users/manthand/Downloads/property-recommendation-system/frontend/src/components/CandidateInput.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandidateInput = ({\n  setCandidates\n}) => {\n  const handleChange = e => {\n    try {\n      const parsed = JSON.parse(e.target.value);\n      if (Array.isArray(parsed)) {\n        setCandidates(parsed);\n      } else {\n        console.error(\"Input is not a valid array of properties.\");\n      }\n    } catch {\n      console.error(\"Invalid JSON format.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Candidate Properties\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Paste JSON array of candidate properties...\",\n      rows: 10,\n      cols: 80,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = CandidateInput;\nexport default CandidateInput;\nvar _c;\n$RefreshReg$(_c, \"CandidateInput\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CandidateInput","setCandidates","handleChange","e","parsed","JSON","parse","target","value","Array","isArray","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","rows","cols","onChange","_c","$RefreshReg$"],"sources":["/Users/manthand/Downloads/property-recommendation-system/frontend/src/components/CandidateInput.tsx"],"sourcesContent":["import React, { FC } from \"react\";\nimport { Property } from \"../types\";\n\ninterface Props {\n  setCandidates: (value: Property[]) => void;\n}\n\nconst CandidateInput: FC<Props> = ({ setCandidates }) => {\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      const parsed = JSON.parse(e.target.value);\n      if (Array.isArray(parsed)) {\n        setCandidates(parsed);\n      } else {\n        console.error(\"Input is not a valid array of properties.\");\n      }\n    } catch {\n      console.error(\"Invalid JSON format.\");\n    }\n  };\n\n  return (\n    <div>\n      <h3>Candidate Properties</h3>\n      <textarea\n        placeholder=\"Paste JSON array of candidate properties...\"\n        rows={10}\n        cols={80}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default CandidateInput;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAc,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOlC,MAAMC,cAAyB,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EACvD,MAAMC,YAAY,GAAIC,CAAyC,IAAK;IAClE,IAAI;MACF,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAACI,MAAM,CAACC,KAAK,CAAC;MACzC,IAAIC,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;QACzBH,aAAa,CAACG,MAAM,CAAC;MACvB,CAAC,MAAM;QACLO,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;MAC5D;IACF,CAAC,CAAC,MAAM;MACND,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACvC;EACF,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BlB,OAAA;MACEmB,WAAW,EAAC,6CAA6C;MACzDC,IAAI,EAAE,EAAG;MACTC,IAAI,EAAE,EAAG;MACTC,QAAQ,EAAEnB;IAAa;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACK,EAAA,GAzBItB,cAAyB;AA2B/B,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}